name: mags-cron

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"  # every 15 minutes

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      API_BASE: ${{ secrets.API_BASE }}
      WORKER_KEY: ${{ secrets.WORKER_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Claim job
        id: claim
        shell: bash
        run: |
          set -euo pipefail
          echo "Claiming next job from $API_BASE ..."
          CLAIM_RESP=$(curl -sS -X POST "$API_BASE/api/queue/claim" \
            -H "X-Worker-Key: $WORKER_KEY" \
            -H "content-type: application/json" \
            -d '{}' )
          echo "$CLAIM_RESP" | tee job.json

          if jq -e '.id' job.json >/dev/null 2>&1; then
            ID=$(jq -r '.id' job.json)
            echo "ID=$ID"
            echo "nojob=false" >> "$GITHUB_OUTPUT"
          else
            echo "No jobs in queue or invalid JSON; exiting 0"
            echo "nojob=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

      - name: Run job (demo)
        if: steps.claim.outputs.nojob == 'false'
        shell: bash
        run: |
          set -euo pipefail
          # TODO: replace with real worker logic; for now log payload
          jq -r '.payload // empty' job.json || true

      - name: Mark complete
        if: steps.claim.outputs.nojob == 'false' && success()
        shell: bash
        run: |
          set -euo pipefail
          ID=$(jq -r '.id' job.json)
          curl -sS -X POST "$API_BASE/api/queue/complete" \
            -H "X-Worker-Key: $WORKER_KEY" \
            -H "content-type: application/json" \
            -d "{\"id\":\"$ID\"}" >/dev/null

      - name: Mark failed
        if: steps.claim.outputs.nojob == 'false' && failure()
        shell: bash
        run: |
          set -euo pipefail
          ID=$(jq -r '.id' job.json)
          ERR="runner failed"
          curl -sS -X POST "$API_BASE/api/queue/fail" \
            -H "X-Worker-Key: $WORKER_KEY" \
            -H "content-type: application/json" \
            -d "{\"id\":\"$ID\",\"error\":$(jq -Rn --arg e \"$ERR\" '$e')}" >/dev/null
