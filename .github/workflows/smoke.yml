name: smoke

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

# needed so the workflow can read repo and post a PR comment
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  smoke:
    runs-on: ubuntu-latest

    env:
      # Optional: set this in GitHub → Settings → Secrets and variables → Actions → Variables
      # or as a Secret if you prefer.
      # Example: https://mags-assistant.vercel.app
      FALLBACK_PROD_URL: ${{ vars.VERCEL_PROD_URL }}

      # Required to query Vercel API for previews
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # --- Discover Vercel preview URL (if exists) ---
      - name: Get Vercel Preview URL
        id: preview
        uses: actions/github-script@v7
        env:
          HEAD_REF: ${{ github.head_ref }}
          SHA: ${{ github.sha }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fetch = global.fetch || (await import('node-fetch')).default;

            const token = process.env.VERCEL_TOKEN;
            const project = process.env.VERCEL_PROJECT_ID;
            if (!token || !project) {
              core.info('No VERCEL_TOKEN or VERCEL_PROJECT_ID; skipping preview lookup.');
              core.setOutput('url', '');
              return;
            }

            // Try by git SHA first, then by branch (head_ref)
            const base = `https://api.vercel.com/v6/deployments`;
            const headers = { Authorization: `Bearer ${token}` };

            async function findBy(query) {
              const url = `${base}?projectId=${project}&${query}&limit=20`;
              const res = await fetch(url, { headers });
              if (!res.ok) return null;
              const data = await res.json();
              const ready = (data.deployments || []).find(d => d.readyState === 'READY');
              if (!ready) return null;
              if (ready.url) return `https://${ready.url}`;
              return null;
            }

            let url = await findBy(`meta-gitSha=${process.env.SHA}`);
            if (!url && process.env.HEAD_REF) {
              url = await findBy(`meta-gitBranch=${encodeURIComponent(process.env.HEAD_REF)}`);
            }

            core.setOutput('url', url || '');
            core.info(`Preview URL: ${url || '(none)'}`);

      # --- Safely comment the preview URL on PRs (non-fatal, avoids 403 on forks) ---
      - name: Comment preview URL (safe)
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && steps.preview.outputs.url != '' }}
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `Vercel preview: ${context.payload.repository.html_url ? '' : ''}${process.env['PREVIEW_URL'] || '${{ steps.preview.outputs.url }}'}`
            });

      # --- Decide which base URL to use for smoke test ---
      - name: Decide URL
        id: baseurl
        run: |
          URL="${{ steps.preview.outputs.url }}"
          if [ -z "$URL" ]; then
            URL="${FALLBACK_PROD_URL}"
          fi
          if [ -z "$URL" ]; then
            # last resort: read from repo variable named PUBLIC_URL (optional)
            URL="${{ vars.PUBLIC_URL }}"
          fi
          echo "Using URL: $URL"
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      # --- Ping your app ---
      - name: Smoke test /api/ping
        run: |
          URL="${{ steps.baseurl.outputs.url }}"
          if [ -z "$URL" ]; then
            echo "No URL available for smoke test. Marking job successful but skipping."
            exit 0
          fi
          echo "Pinging: $URL/api/ping"
          curl -sSf "$URL/api/ping" | tee /dev/stdout
      - name: Notify failure
        if: failure() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != ''
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: node scripts/notify.ts "❌ smoke failed: $GITHUB_RUN_ID"
